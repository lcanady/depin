apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app: prometheus
    component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'depin-ai-compute'
        datacenter: 'primary'

    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    # Load rules once and periodically evaluate them
    rule_files:
      - "depin_rules.yml"
      - "kubernetes_rules.yml"

    # Scrape configuration for various targets
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - default
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      # DePIN AI compute workloads
      - job_name: 'depin-ai-compute'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - ai-compute
            - depin-system
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
          action: keep
          regex: ai-compute|edge-node|training|inference
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: pod

      # Node exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          action: keep
          regex: node-exporter
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

  depin_rules.yml: |
    groups:
    - name: depin.ai.compute
      rules:
      - alert: DePINNodeDown
        expr: up{job="depin-ai-compute"} == 0
        for: 1m
        labels:
          severity: critical
          service: depin
        annotations:
          summary: "DePIN compute node is down"
          description: "DePIN compute node {{ $labels.instance }} has been down for more than 1 minute."

      - alert: HighAIComputeLoad
        expr: rate(container_cpu_usage_seconds_total{namespace="ai-compute"}[5m]) > 0.8
        for: 2m
        labels:
          severity: warning
          service: ai-compute
        annotations:
          summary: "High CPU usage in AI compute workloads"
          description: "AI compute workload {{ $labels.pod }} in namespace {{ $labels.namespace }} is using {{ $value }}% CPU."

      - alert: EdgeNodeLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="depin-ai-compute"}[5m])) > 0.5
        for: 5m
        labels:
          severity: warning
          service: edge-network
        annotations:
          summary: "High latency on edge nodes"
          description: "Edge node {{ $labels.instance }} has 95th percentile latency of {{ $value }}s"

  kubernetes_rules.yml: |
    groups:
    - name: kubernetes.rules
      rules:
      - alert: KubernetesPodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) * 60 * 15 > 0
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Kubernetes pod crash looping"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container }}) is restarting {{ printf \"%.2f\" $value }} times every 15 minutes."

      - alert: KubernetesPodNotReady
        expr: kube_pod_status_phase{phase=~"Pending|Unknown"} > 0
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Kubernetes pod not ready"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready state for longer than 5 minutes."