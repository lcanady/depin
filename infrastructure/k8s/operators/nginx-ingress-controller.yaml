apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app: ingress-nginx
    component: controller
data:
  # Basic configuration
  use-forwarded-headers: "true"
  use-proxy-protocol: "false"
  compute-full-forwarded-for: "true"
  
  # Security headers
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384"
  ssl-prefer-server-ciphers: "true"
  
  # Performance tuning
  worker-processes: "auto"
  worker-connections: "16384"
  worker-cpu-affinity: "auto"
  worker-shutdown-timeout: "240s"
  
  # DePIN specific settings
  client-max-body-size: "100m"
  client-body-buffer-size: "1m"
  client-body-timeout: "60"
  client-header-timeout: "60"
  keepalive-timeout: "75"
  keepalive-requests: "1000"
  
  # Logging
  log-format-escape-json: "true"
  access-log-params: '{"timestamp":"$time_iso8601","remote_addr":"$remote_addr","method":"$request_method","uri":"$request_uri","status":"$status","body_bytes_sent":"$body_bytes_sent","request_time":"$request_time","upstream_response_time":"$upstream_response_time"}'
  
  # Rate limiting
  rate-limit-rps: "100"
  rate-limit-burst-multiplier: "5"
  
  # Custom headers for DePIN network
  add-headers: "ingress-nginx/custom-headers"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-headers
  namespace: ingress-nginx
  labels:
    app: ingress-nginx
    component: headers
data:
  X-Frame-Options: "SAMEORIGIN"
  X-Content-Type-Options: "nosniff"
  X-XSS-Protection: "1; mode=block"
  Referrer-Policy: "strict-origin-when-cross-origin"
  X-DePIN-Network: "ai-compute-cluster"
  X-Cluster-Region: "primary"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app: ingress-nginx
    component: controller
spec:
  selector:
    matchLabels:
      app: ingress-nginx
      component: controller
  template:
    metadata:
      labels:
        app: ingress-nginx
        component: controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: nginx-ingress-controller
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: nginx-ingress-controller
        image: registry.k8s.io/ingress-nginx/controller:v1.8.0
        args:
          - /nginx-ingress-controller
          - --configmap=$(POD_NAMESPACE)/nginx-configuration
          - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          - --annotations-prefix=nginx.ingress.kubernetes.io
          - --publish-service=$(POD_NAMESPACE)/nginx-ingress-controller
          - --ingress-class=nginx
          - --watch-ingress-without-class
          - --enable-ssl-passthrough
          - --default-ssl-certificate=$(POD_NAMESPACE)/depin-tls-cert
          - --metrics-address=0.0.0.0:10254
          - --profiling-address=0.0.0.0:6060
          - --health-check-grace-period=10
          - --update-status=true
          - --update-status-on-shutdown=false
          - --shutdown-grace-period=0
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        - name: metrics
          containerPort: 10254
          protocol: TCP
        - name: profiling
          containerPort: 6060
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: true
          runAsUser: 101
          runAsGroup: 82
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 1
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
      terminationGracePeriodSeconds: 300
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
        operator: Exists
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
        operator: Exists
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app: ingress-nginx
    component: controller
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/path: "/metrics"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  selector:
    app: ingress-nginx
    component: controller
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-controller-metrics
  namespace: ingress-nginx
  labels:
    app: ingress-nginx
    component: controller
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 10254
    protocol: TCP
    targetPort: 10254
  selector:
    app: ingress-nginx
    component: controller